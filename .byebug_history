c
@appointment.errors
@appointment.valid?
n
    )
      notes: notes
      time_slot: time_slot,
      user: user,
      doctor: doctor,
    @appointment = Appointment.new(
notes = params[:appointment][:notes]
patients = params[:appointment][:patients].map { |patient| Patient.find(patient[:id]) }
time_slot = TimeSlot.find(params[:appointment][:timeSlot])
user = current_user
doctor = Doctor.find(params[:appointment][:doctorId])
c
params[:id]
params
c
current_user
@user
current_user
c
current_user
current_user.appointments.include?(@appointment)
@appointment = Appointment.find(params[:id])
c
@appointment
Appointment.find(2)
@appointment.delete && current_user.appointments.include?(@appointment)
@appointment = Appointment.find(params[:id])
params[:id]
params
exit
c
appointment.time_slot.appointment_date.appointment_date
appointment.time_slot.appointment_date
appointment.time_slot
appointment.patients.first
appointment.patients
appointment.user
appointment
appointment.notes
appointment.note
appointment
User.last.appointments.includes(:doctor, :patients, :time_slots)
appointment
exit
c
Doctor.first
(params[:appointment][:doctorId])
Doctor.find(params[:appointment][:doctorId])
c
patients.first
patients
    patients = params[:appointment][:patients].map { |patient| Patient.find(patient[:id]) }
params[:appointment][:patients].first[:id]
params[:appointment][:patients].first.id
params[:appointment][:patients]
patients = params[:appointment][:patients].map { |patient| Patient.find(patient.id) }
time_slot = TimeSlot.find(params[:appointment][:timeSlot])
user = current_user
doctor = Doctor.find(params[:appointment][:doctorId])
c
patients
patients = params[:appointment][:patients].map { |patient| Patient.find(patient.id) }
params[:appointment][:patients]
params[:appointment][:timeSlot]
params[:appointment]
params
c
params[:appointment][:doctorId]
params[:appointment][:doctorID]
params
c
params[:appointment][:props][:doctor]
params[:appointment][:props]
params[
params
c
params
params[:appointment]
params[:appointment][:patients]
params[:appointment]
params
c
patient.valid?
c
params[:patient][:firstName]
params[:patient]
params
patient
patient.valid?
c
params
c
params
c
params
c
params
c
params
c
google
c
google["rows"][0]["elements"][0]["distance"]["text"]
google["rows"][0]["elements"][0]["distance"]
google["rows"][0]["elements"][0]
google["rows"][0]["elements"]
google["rows"][0]
google["rows"]
google
distance_text
google
c
exit
c
distance_value
distance_text
c
@text["rows"][0]["elements"][0]["distance"]["value"]
@text["rows"][0]["elements"][0]["value"]
@text["rows"][0]["elements"][0]["distance"]
@text
c
@text["rows"][0]["elements"][0]["distance"]["text"]
@text["rows"][0]["elements"][0]["distance"]
c
@text["rows"][0]["elements"][0]["distance"]c
@text["rows"][0]["elements"][0]["distance"]
@text["rows"][0]["elements"]
@text["rows"][0]["elements"]["distance"]
@text["rows"][0]["elements"]
@text["rows"].[0]["elements"]
@text["rows"].first["elements"]
@text["rows"].first
@text["rows"]
@text["rows"].first
@text["rows"].first["distance"]
@text["rows"]["distance"]
@text["rows"]
@text
c
@text.c
@text
c
      })
        data
        url: '/api/doctor_search',
        method: 'GET',
      $.ajax({
$.ajax
c
params
c
params
debugger
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params[:input][:name]
params[:input]
params.input
params
c
n
params[:search][:name]
params
c
params
c
params
c
n
from
exit
ENV["twilio_phone_number"]
from
params
c
params[:user][:message]
params
c
account_sid = ENV["twilio_account_sid"]
ENV["twilio_account_sid"]
exit
account_sid
account_sid = ENV["twilio_account_sid"]
account_sid
c
params
continue
@doctors
